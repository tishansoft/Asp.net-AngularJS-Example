<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExpressiveAnnotations</name>
    </assembly>
    <members>
        <member name="T:ExpressiveAnnotations.Analysis.ParseErrorException">
            <summary>
                The exception thrown when parse operation detects error in a specified expression.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.ParseErrorException.#ctor(System.String,ExpressiveAnnotations.Analysis.Location)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.ParseErrorException"/>.
            </summary>
            <param name="message">The error message.</param>
            <param name="location">The erratic code location.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.ParseErrorException.Location">
            <summary>
                Gets the erratic code location related to this error.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Location">
            <summary>
                Contains the location information related to some arbitrary data within associated text block.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Location.#ctor(ExpressiveAnnotations.Analysis.Location)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Location"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Location.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Location"/> class.
            </summary>
            <param name="line">The line number.</param>
            <param name="column">The column number.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Location.Line">
            <summary>
                Gets or sets the line number.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Location.Column">
            <summary>
                Gets or sets the column number.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.TokenType">
            <summary>
                Token type.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.AND">
            <summary>
                Logical conjunction.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.OR">
            <summary>
                Logical disjunction.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NOT">
            <summary>
                Logical negation.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.GE">
            <summary>
                Greater than or equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LE">
            <summary>
                Less than or equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.GT">
            <summary>
                Greater than.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LT">
            <summary>
                Less than.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.EQ">
            <summary>
                Equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NEQ">
            <summary>
                Not equal to.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.ADD">
            <summary>
                Addition.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.SUB">
            <summary>
                Subtraction.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.MUL">
            <summary>
                Multiplication.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.DIV">
            <summary>
                Division.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.INC">
            <summary>
                Prefix/postfix inc(++).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.DEC">
            <summary>
                Prefix/postfix dec(--).
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.LEFT_BRACKET">
            <summary>
                Left bracket.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.RIGHT_BRACKET">
            <summary>
                Right bracket.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.COMMA">
            <summary>
                Comma.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.NULL">
            <summary>
                NULL.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.INT">
            <summary>
                Integer value.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.BOOL">
            <summary>
                Boolean value.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.FLOAT">
            <summary>
                Float value.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.STRING">
            <summary>
                String.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.FUNC">
            <summary>
                Function.
            </summary>
        </member>
        <member name="F:ExpressiveAnnotations.Analysis.TokenType.EOF">
            <summary>
                EOF.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.AssertThatAttribute">
            <summary>
                Validation attribute, executed for non-null annotated field, which indicates that assertion given in logical expression 
                has to be satisfied, for such field to be considered as valid.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.ExpressiveAttribute">
            <summary>
                Base class for expressive validation attributes.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.#ctor(System.String,System.String)">
            <summary>
                Constructor for expressive validation attribute.
            </summary>
            <param name="expression">The logical expression based on which specified condition is computed.</param>
            <param name="errorMessage">The error message to associate with a validation control.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Compile(System.Type,System.Boolean)">
            <summary>
                Parses and compiles expression provided to the attribute. Compiled lambda is then cached and used for validation purposes.
            </summary>
            <param name="validationContextType">The type of the object to be validated.</param>
            <param name="force">Flag indicating whether parsing should be rerun despite the fact compiled lambda already exists.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
                Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="expression">The user-visible expression to include in the formatted message.</param>
            <returns>
                The localized message to present to the user.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValidInternal(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
                Internally used by the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> method.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">validationContext;ValidationContext not provided.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.CachedValidationFuncs">
            <summary>
                Gets the cached validation funcs.
            </summary>        
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Parser">
            <summary>
                Gets the parser.
            </summary>        
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.Expression">
            <summary>
                Gets or sets the logical expression based on which specified condition is computed.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.ExpressiveAttribute.TypeId">
            <summary>
                When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.AssertThatAttribute"/> class.
            </summary>
            <param name="expression">The logical expression based on which assertion condition is computed.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.IsValidInternal(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
                Internally used by the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> method.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Token">
            <summary>
                Token definition.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Token.#ctor(ExpressiveAnnotations.Analysis.TokenType,System.Object,ExpressiveAnnotations.Analysis.Location)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Token"/> class.
            </summary>
            <param name="type">The token type.</param>
            <param name="value">The token value.</param>
            <param name="location">The token location within a specified expression.</param>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Type">
            <summary>
                Gets the token type.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Value">
            <summary>
                Gets the token value.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Analysis.Token.Location">
            <summary>
                Gets or sets the token location within a specified expression.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Lexer">
            <summary>
                Performs the lexical analysis of a specified logical expression.
            </summary>
            <remarks> Type is thread safe. </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Lexer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Lexer"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Lexer.Analyze(System.String)">
            <summary>
                Analyzes a specified logical expression and extracts a sequence of tokens.
            </summary>
            <param name="expression">The logical expression.</param>
            <returns>
                A sequence of extracted tokens.
            </returns>
            <exception cref="T:System.ArgumentNullException">expression;Expression not provided.</exception>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Parser">
            <summary>
                Performs the syntactic analysis of a specified logical expression within given context.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Parser"/> class.
            </summary>
            <remarks> Type is thread safe. </remarks>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.Parse``1(System.String)">
            <summary>
                Parses a specified logical expression into expression tree within given context.
            </summary>
            <typeparam name="Context">The type identifier of the context within which the expression is interpreted.</typeparam>
            <param name="expression">The logical expression.</param>
            <returns>
                A delegate containing the compiled version of the lambda expression described by created expression tree.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.Parse(System.Type,System.String)">
            <summary>
                Parses a specified logical expression into expression tree within given context.
            </summary>
            <param name="context">The type instance of the context within which the expression is interpreted.</param>
            <param name="expression">The logical expression.</param>
            <returns>
                A delegate containing the compiled version of the lambda expression described by created expression tree.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``3(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``4(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Arg3">Third argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``5(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Arg3">Third argument.</typeparam>
            <typeparam name="Arg4">Fourth argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``6(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Arg3">Third argument.</typeparam>
            <typeparam name="Arg4">Fourth argument.</typeparam>
            <typeparam name="Arg5">Fifth argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.AddFunction``7(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
                Registers function signature for the parser.
            </summary>
            <typeparam name="Arg1">First argument.</typeparam>
            <typeparam name="Arg2">Second argument.</typeparam>
            <typeparam name="Arg3">Third argument.</typeparam>
            <typeparam name="Arg4">Fourth argument.</typeparam>
            <typeparam name="Arg5">Fifth argument.</typeparam>
            <typeparam name="Arg6">Sixth argument.</typeparam>
            <typeparam name="Result">Type identifier of returned result.</typeparam>
            <param name="name">Function name.</param>
            <param name="func">Function lambda.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.GetFields">
            <summary>
                Gets names and types of properties extracted from specified expression within given context.
            </summary>
            <returns>
                Dictionary containing names and types.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Parser.GetConsts">
            <summary>
                Gets names and values of constants extracted from specified expression within given context.
            </summary>
            <returns>
                Dictionary containing names and values.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute">
            <summary>
                Validation attribute which indicates that annotated field is required when computed result of given logical expression is true.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute"/> class.
            </summary>
            <param name="expression">The logical expression based on which requirement condition is computed.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.IsValidInternal(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Validates a specified value with respect to the associated validation attribute.
                Internally used by the <see cref="M:ExpressiveAnnotations.Attributes.ExpressiveAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> method.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <returns>
                An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.AllowEmptyStrings">
            <summary>
                Gets or sets a flag indicating whether the attribute should allow empty or whitespace strings.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.Toolchain">
            <summary>
                Contains a set of predefined methods.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.Toolchain.RegisterMethods(ExpressiveAnnotations.Analysis.Parser)">
            <summary>
                Registers built-in methods for expressions parser.
            </summary>
            <param name="parser">The parser instance.</param>
        </member>
    </members>
</doc>
